/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module animations_manager_2 (
    input clk,
    input rst,
    input [2:0] game_state,
    input defense_status,
    input color_selection,
    input start,
    output reg out
  );
  
  
  
  wire [1-1:0] M_ledmanager_out;
  reg [1-1:0] M_ledmanager_update;
  reg [960-1:0] M_ledmanager_sequence;
  reg [60-1:0] M_ledmanager_animation_delay;
  ledmanager_12 ledmanager (
    .clk(clk),
    .rst(rst),
    .update(M_ledmanager_update),
    .sequence(M_ledmanager_sequence),
    .animation_delay(M_ledmanager_animation_delay),
    .out(M_ledmanager_out)
  );
  reg [89:0] M_timeanimed_d, M_timeanimed_q = 1'h0;
  reg [2:0] M_blinking_counter_d, M_blinking_counter_q = 1'h0;
  reg [1:0] M_strip_state_d, M_strip_state_q = 1'h0;
  localparam ENTRANCE_bangsequence = 3'd0;
  localparam FIRSTBANG_bangsequence = 3'd1;
  localparam SECONDBANG_bangsequence = 3'd2;
  localparam BLINK_bangsequence = 3'd3;
  localparam DEFENSE_bangsequence = 3'd4;
  localparam DEFENSIVEFIRSTBANG_bangsequence = 3'd5;
  localparam RESET_bangsequence = 3'd6;
  
  reg [2:0] M_bangsequence_d, M_bangsequence_q = ENTRANCE_bangsequence;
  
  localparam LED_COUNT = 5'h18;
  
  localparam ANIMATION = 21'h1312d0;
  
  localparam REDSHORT = 24'h000100;
  
  localparam BLUESHORT = 24'h010000;
  
  localparam GREENSHORT = 24'h000001;
  
  localparam NOANIMATION = 15'h7530;
  
  reg [959:0] requested_sequence;
  
  reg [59:0] pause_delay;
  
  reg update_status;
  
  reg [23:0] color_choice;
  
  always @* begin
    M_bangsequence_d = M_bangsequence_q;
    M_strip_state_d = M_strip_state_q;
    M_blinking_counter_d = M_blinking_counter_q;
    M_timeanimed_d = M_timeanimed_q;
    
    if (color_selection == 1'h1) begin
      color_choice = 24'h000100;
    end else begin
      color_choice = 24'h010000;
    end
    
    case (game_state)
      3'h0: begin
        M_strip_state_d = 2'h1;
      end
      3'h1: begin
        M_strip_state_d = 2'h1;
      end
      3'h2: begin
        M_strip_state_d = 2'h1;
      end
      3'h3: begin
        M_strip_state_d = 2'h1;
      end
      3'h4: begin
        M_strip_state_d = 2'h2;
      end
      3'h5: begin
        M_strip_state_d = 2'h0;
      end
      3'h6: begin
        M_strip_state_d = 2'h3;
      end
      3'h7: begin
        M_strip_state_d = 2'h0;
      end
    endcase
    
    case (M_strip_state_q)
      2'h0: begin
        
        case (M_bangsequence_q)
          ENTRANCE_bangsequence: begin
            pause_delay = 21'h1312d0;
            update_status = 1'h1;
            requested_sequence = {5'h0c{color_choice}};
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 27'h47868c0) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = SECONDBANG_bangsequence;
            end
          end
          FIRSTBANG_bangsequence: begin
            pause_delay = 21'h1312d0;
            update_status = 1'h1;
            requested_sequence = {5'h0c{{color_choice}}};
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 27'h47868c0) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = SECONDBANG_bangsequence;
            end
          end
          SECONDBANG_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 288'h010101010101010101010101010101010101010101010101010101010101010101010101;
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 26'h23c3460) begin
              M_timeanimed_d = 1'h0;
              M_blinking_counter_d = M_blinking_counter_q + 1'h1;
              M_bangsequence_d = BLINK_bangsequence;
            end
          end
          BLINK_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 288'h000000000000000000000000000000000000000000000000000000000000000000000000;
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 26'h23c3460) begin
              if (M_blinking_counter_q == 3'h4) begin
                M_timeanimed_d = 1'h0;
                M_bangsequence_d = RESET_bangsequence;
              end else begin
                M_timeanimed_d = 1'h0;
                M_bangsequence_d = SECONDBANG_bangsequence;
              end
            end
          end
          RESET_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 576'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (start) begin
              M_bangsequence_d = ENTRANCE_bangsequence;
            end else begin
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          default: begin
            pause_delay = 15'h7530;
            M_ledmanager_update = 1'h0;
            M_ledmanager_sequence = 24'h000000;
            M_ledmanager_animation_delay = pause_delay;
          end
        endcase
      end
      2'h1: begin
        
        case (M_bangsequence_q)
          ENTRANCE_bangsequence: begin
            if (defense_status == 1'h1) begin
              M_bangsequence_d = DEFENSE_bangsequence;
            end else begin
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          DEFENSE_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 576'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001;
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 29'h1ad27480) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          RESET_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 576'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (start) begin
              M_bangsequence_d = ENTRANCE_bangsequence;
            end else begin
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          default: begin
            pause_delay = 15'h7530;
            M_ledmanager_update = 1'h0;
            M_ledmanager_sequence = 24'h000000;
            M_ledmanager_animation_delay = pause_delay;
            out = M_ledmanager_out;
          end
        endcase
      end
      2'h2: begin
        
        case (M_bangsequence_q)
          ENTRANCE_bangsequence: begin
            if (defense_status == 1'h1) begin
              M_bangsequence_d = DEFENSE_bangsequence;
            end else begin
              M_bangsequence_d = FIRSTBANG_bangsequence;
            end
          end
          FIRSTBANG_bangsequence: begin
            pause_delay = 21'h1312d0;
            update_status = 1'h1;
            requested_sequence = {5'h18{{color_choice}}};
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 29'h11e1a300) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          DEFENSE_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 96'h000001000001000001000001;
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 28'h8f0d180) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = DEFENSIVEFIRSTBANG_bangsequence;
            end
          end
          DEFENSIVEFIRSTBANG_bangsequence: begin
            pause_delay = 21'h1312d0;
            update_status = 1'h1;
            requested_sequence = {{5'h14{{color_choice}}}, 96'h000001000001000001000001};
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 29'h11e1a300) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          RESET_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 576'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (start) begin
              M_bangsequence_d = ENTRANCE_bangsequence;
            end else begin
              M_bangsequence_d = RESET_bangsequence;
            end
          end
        endcase
      end
      default: begin
        pause_delay = 21'h1312d0;
        M_ledmanager_update = 1'h0;
        M_ledmanager_sequence = 24'h000000;
        M_ledmanager_animation_delay = pause_delay;
        out = M_ledmanager_out;
      end
      2'h3: begin
        
        case (M_bangsequence_q)
          ENTRANCE_bangsequence: begin
            if (defense_status == 1'h1) begin
              M_bangsequence_d = DEFENSE_bangsequence;
            end else begin
              M_bangsequence_d = FIRSTBANG_bangsequence;
            end
          end
          FIRSTBANG_bangsequence: begin
            pause_delay = 15'h7530;
            requested_sequence = 576'h000001000001000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
            update_status = 1'h0;
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 28'h8f0d180) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = SECONDBANG_bangsequence;
            end
          end
          SECONDBANG_bangsequence: begin
            pause_delay = 21'h1312d0;
            update_status = 1'h1;
            requested_sequence = {96'h000001000001000001000001, {5'h14{{color_choice}}}};
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 28'h8f0d180) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          DEFENSE_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 576'h000001000001000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001;
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 28'h8f0d180) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = DEFENSIVEFIRSTBANG_bangsequence;
            end
          end
          DEFENSIVEFIRSTBANG_bangsequence: begin
            pause_delay = 21'h1312d0;
            update_status = 1'h1;
            requested_sequence = {96'h000001000001000001000001, {5'h10{{color_choice}}}, 96'h000001000001000001000001};
            M_timeanimed_d = M_timeanimed_q + 1'h1;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (M_timeanimed_q == 29'h11e1a300) begin
              M_timeanimed_d = 1'h0;
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          RESET_bangsequence: begin
            pause_delay = 15'h7530;
            update_status = 1'h1;
            requested_sequence = 576'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
            M_ledmanager_update = update_status;
            M_ledmanager_sequence = requested_sequence;
            M_ledmanager_animation_delay = pause_delay;
            if (start) begin
              M_bangsequence_d = ENTRANCE_bangsequence;
            end else begin
              M_bangsequence_d = RESET_bangsequence;
            end
          end
          default: begin
            pause_delay = 15'h7530;
            M_ledmanager_update = 1'h0;
            M_ledmanager_sequence = 24'h000000;
            M_ledmanager_animation_delay = pause_delay;
            out = M_ledmanager_out;
          end
        endcase
      end
    endcase
    out = M_ledmanager_out;
  end
  
  always @(posedge clk) begin
    M_bangsequence_q <= M_bangsequence_d;
    
    if (rst == 1'b1) begin
      M_timeanimed_q <= 1'h0;
      M_blinking_counter_q <= 1'h0;
      M_strip_state_q <= 1'h0;
    end else begin
      M_timeanimed_q <= M_timeanimed_d;
      M_blinking_counter_q <= M_blinking_counter_d;
      M_strip_state_q <= M_strip_state_d;
    end
  end
  
endmodule
