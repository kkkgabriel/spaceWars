/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module ledmanager_12 (
    input clk,
    input rst,
    input update,
    input [959:0] sequence,
    input [59:0] animation_delay,
    output reg out
  );
  
  
  
  reg [59:0] M_timer_d, M_timer_q = 1'h0;
  reg [10:0] M_physical_tracker_d, M_physical_tracker_q = 1'h0;
  reg M_pwm_status_d, M_pwm_status_q = 1'h0;
  reg [7:0] M_pixel_overall_count_d, M_pixel_overall_count_q = 1'h0;
  reg M_already_running_d, M_already_running_q = 1'h0;
  localparam ENTRANCE_state = 3'd0;
  localparam HIGH_state = 3'd1;
  localparam LOW_state = 3'd2;
  localparam REPEAT_state = 3'd3;
  localparam PAUSE_state = 3'd4;
  localparam END_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = ENTRANCE_state;
  
  reg [959:0] alpha;
  
  reg [2:0] color_selector;
  
  localparam PIXELCOUNT_PLAYER1 = 5'h18;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    M_physical_tracker_d = M_physical_tracker_q;
    M_pwm_status_d = M_pwm_status_q;
    M_pixel_overall_count_d = M_pixel_overall_count_q;
    
    color_selector = 1'h1;
    
    case (color_selector)
      1'h1: begin
        alpha = 960'h000001000001000001000001000001000001000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      end
      2'h2: begin
        alpha = 120'h010000010000010000010000010000;
      end
      2'h3: begin
        alpha = 120'h000001000001000001000001000001;
      end
      3'h4: begin
        alpha = 120'h010101010101010101010101010101;
      end
      default: begin
        alpha = 24'h000001;
      end
    endcase
    out = M_pwm_status_q;
    
    case (sequence[(M_physical_tracker_q)*1+0-:1])
      1'h1: begin
        
        case (M_state_q)
          ENTRANCE_state: begin
            M_pixel_overall_count_d = 1'h1;
            M_physical_tracker_d = 1'h0;
            M_state_d = HIGH_state;
          end
          HIGH_state: begin
            M_pwm_status_d = 1'h1;
            M_timer_d = M_timer_q + 1'h1;
            if (M_timer_q > 6'h2d) begin
              M_state_d = LOW_state;
            end
          end
          LOW_state: begin
            M_pwm_status_d = 1'h0;
            M_timer_d = M_timer_q + 1'h1;
            if (M_timer_q >= 6'h3e) begin
              M_timer_d = 1'h0;
              M_physical_tracker_d = M_physical_tracker_q + 1'h1;
              M_state_d = REPEAT_state;
            end
          end
          REPEAT_state: begin
            if (M_physical_tracker_q == 5'h18 * M_pixel_overall_count_q) begin
              M_physical_tracker_d = 1'h0;
              M_timer_d = 1'h0;
              M_state_d = PAUSE_state;
            end else begin
              M_state_d = HIGH_state;
            end
          end
          PAUSE_state: begin
            M_timer_d = M_timer_q + 1'h1;
            if (M_timer_q > animation_delay) begin
              M_timer_d = 1'h0;
              M_pixel_overall_count_d = M_pixel_overall_count_q + 1'h1;
              if (M_pixel_overall_count_q >= 5'h18) begin
                M_state_d = END_state;
              end else begin
                M_state_d = HIGH_state;
              end
            end
          end
          END_state: begin
            M_pwm_status_d = 1'h0;
            if (update == 1'h1) begin
              M_pixel_overall_count_d = 1'h0;
              M_physical_tracker_d = 1'h0;
              M_state_d = ENTRANCE_state;
            end
          end
        endcase
      end
      1'h0: begin
        
        case (M_state_q)
          ENTRANCE_state: begin
            M_physical_tracker_d = 1'h0;
            M_pixel_overall_count_d = 1'h1;
            M_state_d = HIGH_state;
          end
          HIGH_state: begin
            M_pwm_status_d = 1'h1;
            M_timer_d = M_timer_q + 1'h1;
            if (M_timer_q > 5'h11) begin
              M_state_d = LOW_state;
            end
          end
          LOW_state: begin
            M_pwm_status_d = 1'h0;
            M_timer_d = M_timer_q + 1'h1;
            if (M_timer_q >= 6'h3e) begin
              M_timer_d = 1'h0;
              M_physical_tracker_d = M_physical_tracker_q + 1'h1;
              M_state_d = REPEAT_state;
            end
          end
          REPEAT_state: begin
            if (M_physical_tracker_q == 5'h18 * M_pixel_overall_count_q) begin
              M_physical_tracker_d = 1'h0;
              M_timer_d = 1'h0;
              M_state_d = PAUSE_state;
            end else begin
              M_state_d = HIGH_state;
            end
          end
          PAUSE_state: begin
            M_timer_d = M_timer_q + 1'h1;
            if (M_timer_q > animation_delay) begin
              M_timer_d = 1'h0;
              M_pixel_overall_count_d = M_pixel_overall_count_q + 1'h1;
              if (M_pixel_overall_count_q >= 5'h18) begin
                M_state_d = END_state;
              end else begin
                M_state_d = HIGH_state;
              end
            end
          end
          END_state: begin
            M_pwm_status_d = 1'h0;
            if (update == 1'h1) begin
              M_pixel_overall_count_d = 1'h0;
              M_physical_tracker_d = 1'h0;
              M_state_d = ENTRANCE_state;
            end
          end
        endcase
      end
    endcase
    out = M_pwm_status_q;
  end
  
  always @(posedge clk) begin
    M_timer_q <= M_timer_d;
    M_physical_tracker_q <= M_physical_tracker_d;
    M_pwm_status_q <= M_pwm_status_d;
    M_pixel_overall_count_q <= M_pixel_overall_count_d;
    M_already_running_q <= M_already_running_d;
    M_state_q <= M_state_d;
  end
  
endmodule
